# => UserAPI Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-api-deployment
spec:
  selector:
    matchLabels:
      app: user-api
  replicas: 2
  template:
    metadata:
      labels:
        app: user-api
    spec:
      containers:
        - name: user-api
          image: order-user-project/user-api:V01
          ports:
            - containerPort: 8012
---
# => UserAPI Service
apiVersion: v1
kind: Service
metadata:
  name: user-api
spec:
  selector:
    app: user-api
  type: NodePort
  ports:
      port: 80
      targetPort: 8012
      nodePort: 30002
---
# => OrderAPI Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-api-deployment
spec:
  selector:
    matchLabels:
      app: order-api
  replicas: 2
  template:
    metadata:
      labels:
        app: order-api
    spec:
      containers:
        - name: order-api
          image: order-user-project/order-api:V01
          ports:
            - containerPort: 8011
---
# => OrderAPI Service
apiVersion: v1
kind: Service
metadata:
  name: order-api
spec:
  selector:
    app: order-api
  type: NodePort
  ports:
      port: 80
      targetPort: 8011
      nodePort: 30001
---
# => MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:latest
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
      volumes:
        - name: mongodb-data
          emptyDir: { }
---
# => MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  selector:
    app: mongodb
  ports:
    - name: mongodb
      port: 27017
      targetPort: 27017
---
# => Zookeeper Deployment
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  ports:
    - name: client
      port: 2181
      protocol: TCP
      targetPort: 2181
  selector:
    app: zookeeper
---
# => Zookeeper Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: bitnami/zookeeper:latest
          ports:
            - containerPort: 2181
              name: client
          env:
          - name: ALLOW_ANONYMOUS_LOGIN
            value: "yes"
---
# => Kafka Deployment
apiVersion: v1
kind: Service
metadata:
  name: kafka
spec:
  type: ClusterIP
  selector:
    app: kafka
  ports:
    - name: kafka-port
      port: 9092
      targetPort: 9092
---
# => Kafka Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: bitnami/kafka:latest
          ports:
            - containerPort: 9092
          env:
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_CFG_LISTENERS
              value: "PLAINTEXT://:9092"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka:9092"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
          volumeMounts:
            - name: data
              mountPath: /var/lib/kafka/data
      volumes:
        - name: data
          emptyDir: {}
---
# => Elasticsearch Service => Hata aldım
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
spec:
  selector:
    app: elasticsearch
  ports:
    - name: http
      port: 9200
      targetPort: 9200
    - name: transport
      port: 9300
      targetPort: 9300
---
# => Elasticsearch Deployment => Hata aldım
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:7.13.0
          env:
            - name: discovery.type
              value: single-node
            - name: "ES_JAVA_OPTS"
              value: "-Xms512m -Xmx512m"
            - name: xpack.monitoring.enabled
              value: "true"
            - name: xpack.watcher.enabled
              value: "false"
            - name: xpack.security.enabled
              value: "false"
          ports:
            - containerPort: 9200
              name: http
            - containerPort: 9300
              name: transport
          volumeMounts:
            - name: elasticsearch-data
              mountPath: /usr/share/elasticsearch/data
      volumes:
        - name: elasticsearch-data
          persistentVolumeClaim:
            claimName: elasticsearch-data
---
# => Kibana Service
apiVersion: v1
kind: Service
metadata:
  name: kibana
spec:
  selector:
    app: kibana
  type: NodePort
  ports:
    - name: http
      port: 5601
      targetPort: 5601
      nodePort: 30004
---
# => Kibana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
        - name: kibana
          image: docker.elastic.co/kibana/kibana:7.13.0
          env:
            - name: ELASTICSEARCH_URL
              value: "http://elasticsearch:9200"
            - name: ELASTICSEARCH_HOSTS
              value: "http://elasticsearch:9200"
          ports:
            - containerPort: 5601
              name: http
---
# => OrderElastic Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-elastic-deployment
spec:
  selector:
    matchLabels:
      app: order-elastic
  replicas: 2
  template:
    metadata:
      labels:
        app: order-elastic
    spec:
      containers:
        - name: order-elastic
          image: order-user-project/order-elastic:V01
          ports:
            - containerPort: 8013
---
# => OrderElastic Service
apiVersion: v1
kind: Service
metadata:
  name: order-elastic
spec:
  selector:
    app: order-elastic
  type: NodePort
  ports:
    - name: http
      port: 80
      targetPort: 8013
      nodePort: 30003