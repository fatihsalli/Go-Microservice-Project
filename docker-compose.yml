version: "3"
services:
  mongodb:
    container_name: 'mongodb'
    image: 'mongo:latest'
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - mongodb-data:/data/db
    networks:
      my-network:
        aliases:
          - mongodb

  zookeeper:
    container_name: 'zookeeper'
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    container_name: 'kafka'
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  kafka-ui:
    container_name: 'kafka-ui'
    image: 'provectuslabs/kafka-ui'
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_NAME=local
    depends_on:
      - kafka

  elasticsearch:
    container_name: 'elasticsearch'
    image: 'docker.elastic.co/elasticsearch/elasticsearch:7.13.0'
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  kibana:
    container_name: 'kibana'
    image: 'docker.elastic.co/kibana/kibana:7.13.0'
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"

  order-api:
    container_name: 'order-api'
    restart: on-failure
    build:
      context: .
      dockerfile: /internal/apps/order-api/Dockerfile
    ports:
      - "8011:8011"
    depends_on:
      - mongodb
      - kafka
      - user-api

  user-api:
    container_name: 'user-api'
    restart: on-failure
    build:
      context: .
      dockerfile: /internal/apps/user-api/Dockerfile
    ports:
      - "8012:8012"
    depends_on:
      - mongodb
      - kafka

  order-elastic:
    container_name: 'order-elastic'
    restart: on-failure
    build:
      context: .
      dockerfile: /internal/apps/order-elastic/Dockerfile
    ports:
      - "8013:8013"
    depends_on:
      - kafka
      - order-api
      - elasticsearch

volumes:
  elasticsearch-data:
  mongodb-data:

networks:
  my-network:
    driver: bridge